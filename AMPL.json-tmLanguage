{ "name": "AMPL",
  "scopeName": "source.ampl",
  "fileTypes": ["mod", "dat", "run"],
  "repository": {
    "general":  {
      "patterns":  [
          {
            "include": "#linecomment"
          },
          {
            "include": "#blockcomment"
          },
          {
            "include": "#singlequotestring"
          },
          {
            "include": "#doublequotestring"
          },
          {
            "include": "#number"
          },
          {
            "include": "#keyword"
          },
          {
            "include": "#suffix"
          },
          {
            "include": "#math"
          },
          {
            "include": "#operator"
          }
      ]
    },
    "linecomment":  {
      "name": "comment.line.sharp.ampl",
      "match": "(#.*)(?!\\[\\[).*$\\n?",
      "captures": { "1": { "name": "punctuation.definition.comment.gms" } }
    },
    "blockcomment":  {
      "name": "comment.slashstar.ampl",
      "begin": "/\\*",
      "end": "\\*/",
      "contentName": "comment.block.documentation.ampl"
    },
    "singlequotestring":  {
      "name": "string.quoted.single.ampl",
      "begin": "'",
      "beginCaptures": { "0": { "name": "punctuation.definition.string.begin.ampl" } },
      "end": "'",
      "endCaptures": { "0": { "name": "punctuation.definition.string.end.ampl" } },
      "patterns": [ { "match": "%(\\w+%|\\d+)", "name": "entity.name.class.ampl" } ]
    },
    "doublequotestring":  {
      "name": "string.quoted.double.ampl",
      "begin": "\"",
      "beginCaptures": { "0": { "name": "punctuation.definition.string.begin.ampl" } },
      "end": "\"",
      "endCaptures": { "0": { "name": "punctuation.definition.string.end.ampl" } },
      "patterns": [ { "match": "%(\\w+%|\\d+)", "name": "entity.name.class.ampl" } ]
    },
    "number":  {
      "name": "constant.numeric.ampl",
      "match": "(?<![\\d.])\\b\\d+(\\.\\d+)?([eE]-?\\d+)?|\\.\\d+([eE]-?\\d+)?|(?i)([+-]?infinity)"
    },
    "keyword":  {
      "name": "keyword.control.ampl",
      "match": "(?i)\\b(minimize|maximize|objective|coeff|coef|cover|obj|default|from|to|to_come|net_in|net_out|dimen|dimension|integer|binary|set|param|var|node|ordered|circular|reversed|symbolic|arc|check|close|display|drop|include|print|printf|quit|reset|restore|solve|update|write|shell|model|data|option|let|solution|fix|unfix|end|function|pipe|format|if|then|else|and|or|exists|forall|in|not|within|while|repeat|for|subject to|subj to|s\\.t\\.|card|next|nextw|prev|prevw|first|last|member|ord|ord0)\\b"
    },
    "suffix":  {
      "name": "keyword.ampl",
      "match": "\\b\\w*.(lb|ub|lb0|lb1|lb2|lrc|ub0|ub1|ub2|urc|val|lbs|ubs|init|body|dinit|dual|init0|ldual|slack|udual|lslack|uslack|dinit0)|(<<|>>)"
    },
    "math":  {
      "name": "keyword.operator.ampl",
      "match": "(?i)\\b(union|diff|difference|symdiff|sum|inter|intersect|intersection|cross|setof|by|less|mod|div|product|abs|acos|acosh|alias|asin|asinh|atan|atan2|atanh|ceil|cos|exp|floor|log|log10|max|min|precision|round|sin|sinh|sqrt|tan|tanh|trunc|Beta|Cauchy|Exponential|Gamma|Irand224|Normal|Poisson|Uniform|Uniform01)\\b"
    },
    "operator":  {
      "name": "keyword.operator.ampl",
      "match": "(\\+|-|\\*|\\/|\\*\\*|=|<=?|>=?|==|\\||\\^|<|>|!|\\.\\.|:=|&|!=|:|/)"
    },
    "argumentcurly":  {
      "begin": "\\{",
      "patterns": [
          {
            "include": "#general"
          },
          {
            "name": "meta.function-call.arguments.ampl",
            "match": "."
          }
      ],
      "end": "\\}"
    },
    "argumentbracket":  {
      "begin": "\\[",
      "patterns": [
          {
            "include": "#general"
          },
          {
            "name": "meta.function-call.arguments.ampl",
            "match": "\\w"
          }
      ],
      "end": "\\]"
    }
  },
  "patterns": [
      {
        "include": "#general"
      },
      {
        "include": "#argumentcurly"
      },
      {
        "include": "#argumentbracket"
      }
  ],
  "uuid": "7224acbd-b663-4ec3-8a02-3e6cf1680446"
}
